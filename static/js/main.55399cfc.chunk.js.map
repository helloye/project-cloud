{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleButton","b","setState","security","state","quality","backup","handleInputChange","e","i","requestName","target","value","postTarget","handleSliderChange","duration","postData","_this$state","endTime","fetch","method","mode","headers","Accept","Content-Type","body","JSON","stringify","unix","moment","intervalId","undefined","config","_this2","intervalID","setInterval","add","clearInterval","_this3","_this$state2","canSubmit","react_default","a","createElement","className","id","placeholder","onChange","parseFloat","Math","round","toFixed","format","type","min","max","step","onClick","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55399cfc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as moment from 'moment';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const endTime = moment();\n    this.state = {\n      intervalId: undefined,\n      requestName: undefined,\n      duration: 5,\n      config: 0,\n      endTime,\n      quality: false,\n      security: false,\n      backup: false,\n      postTarget: 'http://localhost:3000/dc1'\n    }\n  }\n\n  componentDidMount() {\n    const intervalID = setInterval(() => {\n        const endTime = moment().add(this.state.duration, 's');\n        this.setState({ endTime });\n    }, 500);\n    this.setState({\n        intervalID\n    })\n  }\n\n  componentWillUnmount() {\n    if (!!this.state.intervalID) {\n      clearInterval(this.state.intervalID);\n    }\n  }\n\n  toggleButton = (b) => {\n    switch (b) {\n        case 'security':\n            this.setState({ security: !this.state.security });\n            break;\n        case 'quality':\n            this.setState({ quality: !this.state.quality });\n            break;\n        case 'backup':\n            this.setState({ backup: !this.state.backup });\n            break;\n        default:\n          break;\n    }\n  }\n\n  handleInputChange = (e, i) => {\n    switch (i) {\n        case 'requestName':\n            this.setState({ requestName: e.target.value });\n            break;\n        case 'postTarget':\n            this.setState({ postTarget: e.target.value });\n            break;\n        default:\n            break;\n    }\n\n  }\n\n  handleSliderChange = (e) => {\n    this.setState({ duration: e.target.value });\n  }\n\n  postData = () => {\n    const { requestName, quality, security, endTime , backup} = this.state;\n    fetch(this.state.postTarget, {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        requestName,\n        quality,\n        security,\n        backup,\n        endTime: endTime.unix()\n      })\n    })\n  }\n\n  render() {\n    // Can only submit if one of the security\n    const { requestName, quality, security, backup, postTarget } = this.state;\n    // Can only submit if user had filled in request name, and selected an option.\n    const canSubmit = requestName && (quality || security);\n    return (\n      <div className=\"App\">\n        <h1>Resource Request Dashboard</h1>\n        <div id='form'>\n          <div id='request-name'>\n            <div>Request Name</div>\n            <input\n            placeholder={' Enter your request name here...'}\n            onChange={(e) => this.handleInputChange(e, 'requestName')}\n          />\n          </div>\n          <div id='time-slider'>\n            Duration (seconds):\n            <div id='duration-label'>\n              <div>\n              {parseFloat(Math.round(this.state.duration * 100)/100).toFixed(2)}\n              </div>\n              <div>\n              {'Resource reserved until: ' + this.state.endTime.format('MMMM Do YYYY, h:mm:ss a')}\n              </div>\n            </div>\n            <input\n              id='slider'\n              type='range'\n              min='5' max='60'\n              value={this.state.duration}\n              onChange={this.handleSliderChange}\n              step='.5'/>\n          </div>\n          <div id='spec-selection'>\n            <button id='btn-quality' className={quality ? 'selected' : ''}\n                    onClick={() => this.toggleButton('quality')}>\n              Quality { quality ? '✓' : ''}\n            </button>\n            <button id='btn-security' className={security ? 'selected' : ''}\n                    onClick={() => this.toggleButton('security')}>\n              Security { security ? '✓' : ''}\n            </button>\n            <button id='btn-backup' className={backup ? 'selected' : ''}\n                    onClick={() => this.toggleButton('backup')}>\n                Backup { backup ? '✓' : ''}\n            </button>\n          </div>\n          <div id='submit-button'>\n            <button className={!canSubmit ? 'btn-disabled' : 'btn-enabled'}\n                    disabled={!canSubmit}\n                    onClick={this.postData}\n            >\n              {canSubmit ? 'Submit Request' : 'Please fill in all the required fields...'}\n            </button>\n          </div>\n          <div id='post-target'>\n            <input\n              value={postTarget}\n              placeholder={'Target destination here... (i.e https://localhost:3000/dc1)'}\n              onChange={(e) => this.handleInputChange(e, 'postTarget')}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleButton","b","setState","security","state","quality","backup","handleInputChange","e","i","requestName","target","value","postTarget","handleSliderChange","duration","postData","_this$state","endTime","fetch","concat","method","headers","Accept","Content-Type","body","JSON","stringify","unix","then","res","json","data","console","log","setTimeout","allocationState","allocation","requestJobID","id","resetData","moment","intervalId","undefined","renderFormContent","_this$state2","isAllocatedOrQueued","react_default","a","createElement","placeholder","onChange","parseFloat","Math","round","toFixed","format","type","min","max","step","className","onClick","renderButtons","_this$state3","canSubmit","redirectOrCancel","disabled","jobid","dataCenter","killRequest","window","open","_this2","intervalID","setInterval","add","clearInterval","_this3","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c47922a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as moment from 'moment';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const endTime = moment();\n    this.state = {\n      intervalId: undefined,\n      requestName: undefined,\n      duration: 5,\n      endTime,\n      quality: false,\n      security: false,\n      backup: false,\n      postTarget: 'http://pcvm2-15.lan.sdn.uky.edu:3000',\n      requestJobID: -1,\n      allocationState: 'draft'\n    }\n  }\n\n  componentDidMount() {\n    const intervalID = setInterval(() => {\n        const endTime = moment().add(this.state.duration, 's');\n        this.setState({ endTime });\n    }, 500);\n    this.setState({\n        intervalID\n    })\n  }\n\n  componentWillUnmount() {\n    if (!!this.state.intervalID) {\n      clearInterval(this.state.intervalID);\n    }\n  }\n\n  toggleButton = (b) => {\n    switch (b) {\n        case 'security':\n            this.setState({ security: !this.state.security });\n            break;\n        case 'quality':\n            this.setState({ quality: !this.state.quality });\n            break;\n        case 'backup':\n            this.setState({ backup: !this.state.backup });\n            break;\n        default:\n          break;\n    }\n  }\n\n  handleInputChange = (e, i) => {\n    switch (i) {\n        case 'requestName':\n            this.setState({ requestName: e.target.value });\n            break;\n        case 'postTarget':\n            this.setState({ postTarget: e.target.value });\n            break;\n        default:\n            break;\n    }\n\n  }\n\n  handleSliderChange = (e) => {\n    this.setState({ duration: e.target.value });\n  }\n\n  postData = () => {\n    const { requestName, quality, security, endTime , backup, duration } = this.state;\n    fetch(`${this.state.postTarget}/request`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        requestName,\n        quality,\n        security,\n        backup,\n        duration,\n        endTime: endTime.unix(),\n      })\n    }).then((res) => res.json()).then((data) => {\n        console.log('Request Response:', data);\n        setTimeout(() => {\n            this.setState({\n                allocationState: data.allocation,\n                requestJobID: data.id\n            });\n        }, 600);\n    });\n\n    this.setState({allocationState: 'requesting'});\n  }\n\n  resetData = () =>{\n      const endTime = moment();\n      this.setState({\n          intervalId: undefined,\n          requestName: undefined,\n          duration: 5,\n          endTime,\n          quality: false,\n          security: false,\n          backup: false,\n          requestJobID: -1,\n          allocationState: 'draft'\n      })\n  }\n\n  render() {\n    // Can only submit if one of the security\n    const { postTarget } = this.state;\n    // Can only submit if user had filled in request name, and selected an option.\n    return (\n      <div className=\"App\">\n        <h1>Resource Request Dashboard</h1>\n        <div id='form'>\n          {this.renderFormContent()}\n          {this.renderButtons()}\n          <div id='post-target'>\n            <input\n              value={postTarget}\n              placeholder={'Target destination here... (i.e https://localhost:3000/dc1)'}\n              onChange={(e) => this.handleInputChange(e, 'postTarget')}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderFormContent = () => {\n      const { quality, security, backup, allocationState, requestJobID } = this.state;\n      if (this.isAllocatedOrQueued(requestJobID, allocationState)) {\n          return null;\n      }\n      return (\n          <div>\n              <div id='request-name'>\n                  <div>Request Name</div>\n                  <input\n                      id='request-name-input'\n                      placeholder={' Enter your request name here...'}\n                      onChange={(e) => this.handleInputChange(e, 'requestName')}\n                  />\n              </div>\n              <div id='time-slider'>\n                  Duration (seconds):\n                  <div id='duration-label'>\n                      <div>\n                          {parseFloat(Math.round(this.state.duration * 100)/100).toFixed(2)}\n                      </div>\n                      <div>\n                          {'Resource reserved until: ' + this.state.endTime.format('MMMM Do YYYY, h:mm:ss a')}\n                      </div>\n                  </div>\n                  <input\n                      id='slider'\n                      type='range'\n                      min='5' max='60'\n                      value={this.state.duration}\n                      onChange={this.handleSliderChange}\n                      step='.5'/>\n              </div>\n              <div id='spec-selection'>\n                  <button id='btn-quality' className={quality ? 'selected' : ''}\n                          onClick={() => this.toggleButton('quality')}>\n                      Quality { quality ? '✓' : ''}\n                  </button>\n                  <button id='btn-security' className={security ? 'selected' : ''}\n                          onClick={() => this.toggleButton('security')}>\n                      Security { security ? '✓' : ''}\n                  </button>\n                  <button id='btn-backup' className={backup ? 'selected' : ''}\n                          onClick={() => this.toggleButton('backup')}>\n                      Backup { backup ? '✓' : ''}\n                  </button>\n              </div>\n          </div>\n      )\n  }\n\n  renderButtons = () => {\n      const { requestName, quality, security, allocationState, requestJobID } = this.state;\n      const canSubmit = requestName && (quality || security);\n      if (this.isAllocatedOrQueued(requestJobID, allocationState)) {\n          // Return link and reset button.\n          return(<div id='submit-button'>\n              <button id='redirect-button'\n                      className={allocationState === 'queued' ? 'btn-cancel' : ''}\n                      onClick={() => this.redirectOrCancel(requestJobID, allocationState)}>\n                  {allocationState === 'queued' ?\n                      `Job id:${requestJobID} queued. Click to Cancel Request`\n                      :\n                      'Resource allocated on: ' + allocationState}\n              </button>\n              {allocationState === 'queued' ? null :\n              <button id='reset-button' onClick={this.resetData}>\n                  Request New Resources\n              </button>\n              }\n\n          </div>);\n      }\n      return (\n          <div id='submit-button'>\n              <button className={!canSubmit || allocationState === 'requesting' ? 'btn-disabled' : 'btn-enabled'}\n                      disabled={!canSubmit || allocationState === 'requesting'}\n                      onClick={this.postData}\n              >\n                  {canSubmit && !allocationState === 'requesting' ?\n                      'Submit Request' :\n                      allocationState === 'requesting' ? 'Requesting...' : 'Please fill in all the required fields...'}\n              </button>\n          </div>\n      )\n  }\n\n  // Checks if it's allocated to one of the VM's or if queued\n  // And double checks if it was assigned an id\n  isAllocatedOrQueued = function (jobid, allocation) {\n      return (allocation === 'west1' || allocation === 'west2'\n      || allocation === 'north1' || allocation === 'north2'\n      || allocation === 'east1' || allocation === 'east2'\n      || allocation === 'queued') && jobid > 0;\n  }\n\n  redirectOrCancel = (id, dataCenter) => {\n      // If job is still queued, we need to send a cancel.\n      if (dataCenter === 'queued') {\n          // Send post to urbService to cancel job/\n          this.killRequest(id);\n          // Then reset state of app.\n          this.resetData();\n      } else {\n          // Else it is already allocated.\n          // TODO: Redirect to proper datacenter UI\n          window.open('http://www.google.com');\n      }\n  }\n\n  killRequest = (id) => {\n      fetch(`${this.state.postTarget}/kill`, {\n          method: 'POST',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ id })\n      })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
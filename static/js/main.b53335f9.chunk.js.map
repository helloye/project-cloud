{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSliderChange","e","setState","duration","target","value","handleSelectConfig","i","selection","state","config","_this2","react_default","a","createElement","className","id","placeholder","parseFloat","Math","round","toFixed","type","min","max","onChange","step","style","background","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b53335f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      duration: 1,\n      config: 0\n    }\n  }\n\n  handleSliderChange = (e) => {\n    this.setState({ duration: e.target.value });\n  }\n\n  handleSelectConfig = (i) => {\n    const selection = this.state.config === i ? 0 : i;\n    this.setState({ config: selection});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id='form'>\n          <div id='request-name'>\n            Request Name: <input\n            placeholder={' Enter your request name here...'}\n          />\n          </div>\n          <div id='time-slider'>\n            Duration (hrs):\n            <div id='duration-label'>\n              {parseFloat(Math.round(this.state.duration * 100)/100).toFixed(2)}\n            </div>\n            <input\n              id='slider'\n              type='range'\n              min='1' max='12'\n              value={this.state.duration}\n              onChange={this.handleSliderChange}\n              step='.25'/>\n\n          </div>\n          <div id='resource-spec-section'>\n            <div id='cpu-dropdown'>\n              CPU:\n              <select>\n                <option value='C2_2.4'>2 Cores, 2.4 Ghz</option>\n                <option value='C6_3.6'>6 Cores, 3.6 Ghz</option>\n                <option value='C8_4.1'>6 Cores, 4.1 Ghz</option>\n                <option value='C8_3.2'>8 Cores, 3.2 Ghz</option>\n                <option value='C16_4.1'>16 Cores, 4.1 Ghz</option>\n              </select>\n            </div>\n            <div id='resource-request-input'>\n              <div id='ram-input'>\n                RAM (GB): <input\n              />\n              </div>\n              <div id='storage-input'>\n                Storage (GB): <input\n              />\n              </div>\n              <div id='network-down-input'>\n                Network Down (Mbps): <input\n              />\n              </div>\n              <div id='network-up-input'>\n                Network Up (Mbps): <input\n              />\n              </div>\n              <div id='encrypt-traffic'>\n                Encrypt Network Traffic: <input\n                type='checkbox'\n              />\n              </div>\n            </div>\n          </div>\n          <div id='pre-config-resources'>\n            <table>\n              <tr>\n                <th>Select</th>\n                <th>Name</th>\n                <th>CPU</th>\n                <th>RAM</th>\n                <th>Storage</th>\n                <th>Network</th>\n              </tr>\n              <tr style={this.state.config === 1 ? {\n                background: 'lightblue'\n              } : {}}>\n                <td>\n                  <input\n                    value = 'Select'\n                    type ='button'\n                    onClick={() => this.handleSelectConfig(1)}\n                  />\n                </td>\n                <td>Config 1</td>\n                <td>2 Cores 2.4GHz</td>\n                <td>8 GB</td>\n                <td>1 TB</td>\n                <td>10/10</td>\n              </tr>\n              <tr style={this.state.config === 2 ? {\n                background: 'lightblue'\n              } : {}}>\n                <td>\n                  <input\n                    value = 'Select'\n                    type ='button'\n                    onClick={() => this.handleSelectConfig(2)}\n                  />\n                </td>\n                <td>Config 2</td>\n                <td>6 Cores 3.4GHz</td>\n                <td>16 GB</td>\n                <td>4 TB</td>\n                <td>100/100</td>\n              </tr>\n              <tr style={this.state.config === 3 ? {\n                background: 'lightblue'\n              } : {}}>\n                <td>\n                  <input\n                    value = 'Select'\n                    type ='button'\n                    onClick={() => this.handleSelectConfig(3)}\n                  />\n                </td>\n                <td>Config 3</td>\n                <td>18 Cores 4.1GHz</td>\n                <td>32 GB</td>\n                <td>50 TB</td>\n                <td>100/50</td>\n              </tr>\n              <tr style={this.state.config === 4 ? {\n                background: 'lightblue'\n              } : {}}>\n                <td>\n                  <input\n                    value = 'Select'\n                    type ='button'\n                    onClick={() => this.handleSelectConfig(4)}\n                  />\n                </td>\n                <td>Config 4</td>\n                <td>32 Cores 3.6GHz</td>\n                <td>64 GB</td>\n                <td>1 PB</td>\n                <td>50/50</td>\n              </tr>\n            </table>\n            <div id='submit-button'>\n              <button>Submit Request</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
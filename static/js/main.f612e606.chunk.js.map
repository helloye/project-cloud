{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","serverConfig","urb","hostname","l3","l2","dashboard","east1","east2","north1","north2","west1","west2","localhost","openSocket","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleButton","b","setState","security","state","quality","backup","handleInputChange","e","i","requestName","target","value","postTarget","handleDurationChange","duration","handleFileSizeChange","fileSize","postData","_this$state","endTime","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","unix","then","res","json","data","console","log","setTimeout","allocationState","allocation","requestJobID","id","layer","resetData","moment","intervalId","undefined","renderFormContent","_this$state2","isAllocatedOrQueued","react_default","a","createElement","maxLength","placeholder","onChange","parseFloat","Math","round","toFixed","format","type","min","max","step","className","onClick","renderJobStatus","_this$state3","renderButtons","_this$state4","canSubmit","serverInfo","getServerInfo","redirectOrCancel","disabled","jobid","dataCenter","killRequest","window","open","s","cb","_this2","err","ioData","parse","matchedJob","activeJobs","reduce","acc","j","push","length","completedJobs","on","update","intervalID","setInterval","add","clearInterval","_this3","Component","Boolean","location","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f612e606.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as moment from 'moment';\nimport openSocket from 'socket.io-client';\nimport './App.css';\n\nconst serverConfig = {\n    \"urb\": {\n        \"hostname\": \"pcvm3-14.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.94\",\n        \"l2\": \"10.10.12.6\"\n    },\n    \"dashboard\": {\n        \"hostname\": \"pcvm1-9.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.77\",\n        \"l2\": \"n/a\"\n    },\n    \"east1\": {\n        \"hostname\": \"pcvm2-20.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.85\",\n        \"l2\": \"10.10.12.1\"\n    },\n    \"east2\": {\n        \"hostname\": \"pcvm1-10.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.78\",\n        \"l2\": \"10.10.12.2\"\n    },\n    \"north1\": {\n        \"hostname\": \"pcvm3-13.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.93\",\n        \"l2\": \"10.10.10.3\"\n    },\n    \"north2\": {\n        \"hostname\": \"pcvm2-24.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.89\",\n        \"l2\": \"10.10.10.4\"\n    },\n    \"west1\": {\n        \"hostname\": \"pcvm3-15.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.95\",\n        \"l2\": \"10.10.11.1\"\n    },\n    \"west2\": {\n        \"hostname\": \"pcvm3-16.instageni.umkc.edu\",\n        \"l3\": \"204.76.187.96\",\n        \"l2\": \"10.10.11.2\"\n    },\n    \"localhost\": {\n        \"hostname\": \"localhost\"\n    }\n};\n\nlet socket;\nsocket = openSocket(`http://${serverConfig.urb.hostname}:3000`);\n// socket = openSocket('http://localhost:3000');\nconst socketIOCallBack = (cb) => {\n  socket.on('job-update', (update) => cb(null, update));\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    const endTime = moment();\n    this.state = {\n      intervalId: undefined,\n      requestName: undefined,\n      duration: 10,\n      fileSize: 500,\n      endTime,\n      quality: false,\n      security: false,\n      backup: false,\n      postTarget: `http://${serverConfig.urb.hostname}:3000`,\n      // postTarget: 'http://localhost:3000',\n      requestJobID: -1,\n      allocationState: 'draft',\n      layer: -1\n    }\n\n  }\n\n  componentDidMount() {\n    socketIOCallBack((err, ioData) => {\n      const data = JSON.parse(ioData);\n      console.log('[SOCKET.IO] React IO Data Received:', data);\n\n      const matchedJob = data.activeJobs.reduce((acc, j) => {\n        if(this.state.requestJobID === j.id) {\n          acc.push(j);\n        }\n        return acc;\n      }, []);\n\n      console.log('Matched!', matchedJob);\n      // If the queued job was matched. Set it's allocation state.\n      if (matchedJob.length > 0) {\n        this.setState({\n            allocationState: matchedJob[0].allocation,\n            layer: matchedJob[0].layer\n        });\n      }\n\n      const completedJobs = data.completedJobs.reduce((acc, j) => {\n          if(this.state.requestJobID === j.id) {\n              acc.push(j);\n          }\n          return acc;\n      }, []);\n      // If we find it in the completed pool, set state to completed and disable link\n        if (completedJobs.length > 0) {\n            this.setState({ allocationState: 'completed' });\n        }\n    });\n\n    const intervalID = setInterval(() => {\n        const endTime = moment().add(this.state.duration, 's');\n        this.setState({ endTime });\n    }, 500);\n    this.setState({\n        intervalID\n    })\n  }\n\n  componentWillUnmount() {\n    if (!!this.state.intervalID) {\n      clearInterval(this.state.intervalID);\n    }\n  }\n\n  toggleButton = (b) => {\n    switch (b) {\n        case 'security':\n            this.setState({ security: !this.state.security });\n            break;\n        case 'quality':\n            this.setState({ quality: !this.state.quality });\n            break;\n        case 'backup':\n            this.setState({ backup: !this.state.backup });\n            break;\n        default:\n          break;\n    }\n  }\n\n  handleInputChange = (e, i) => {\n    switch (i) {\n        case 'requestName':\n            this.setState({ requestName: e.target.value });\n            break;\n        case 'postTarget':\n            this.setState({ postTarget: e.target.value });\n            break;\n        default:\n            break;\n    }\n\n  }\n\n  handleDurationChange = (e) => {\n    this.setState({ duration: e.target.value });\n  }\n\n  handleFileSizeChange = (e) => {\n      this.setState({ fileSize: e.target.value });\n  }\n\n  postData = () => {\n    const { requestName, quality, security, endTime , backup, duration, fileSize } = this.state;\n    fetch(`${this.state.postTarget}/request`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        requestName,\n        quality,\n        security,\n        backup,\n        duration,\n        fileSize,\n        endTime: endTime.unix(),\n      })\n    }).then((res) => res.json()).then((data) => {\n        console.log('Request Response:', data);\n        setTimeout(() => {\n            this.setState({\n                allocationState: data.allocation,\n                requestJobID: data.id,\n                layer: data.layer\n            });\n        }, 600);\n    });\n\n    this.setState({allocationState: 'requesting'});\n  }\n\n  resetData = () =>{\n      const endTime = moment();\n      this.setState({\n          intervalId: undefined,\n          requestName: undefined,\n          duration: 10,\n          fileSize: 500,\n          endTime,\n          quality: false,\n          security: false,\n          backup: false,\n          requestJobID: -1,\n          allocationState: 'draft'\n      })\n  }\n\n  render() {\n    // Can only submit if one of the security\n    const { postTarget } = this.state;\n    // Can only submit if user had filled in request name, and selected an option.\n    return (\n      <div className=\"App\">\n        <h1>Resource Request Dashboard</h1>\n        <div id='form'>\n          {this.renderFormContent()}\n          {this.renderJobStatus()}\n          {this.renderButtons()}\n          <div id='post-target'>\n            <input\n              value={postTarget}\n              placeholder={'Target destination here... (i.e https://localhost:3000/dc1)'}\n              onChange={(e) => this.handleInputChange(e, 'postTarget')}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderFormContent = () => {\n      const { quality, security, backup, allocationState, requestJobID } = this.state;\n      if (this.isAllocatedOrQueued(requestJobID, allocationState)) {\n          return null;\n      }\n      return (\n          <div>\n              <div id='request-name'>\n                  <div>Request Name</div>\n                  <input\n                      id='request-name-input'\n                      maxLength={15}\n                      placeholder={'Request name...'}\n                      onChange={(e) => this.handleInputChange(e, 'requestName')}\n                  />\n              </div>\n              <div id='time-slider'>\n                  Duration (seconds):\n                  <div id='duration-label'>\n                      <div>\n                          {parseFloat(Math.round(this.state.duration * 100)/100).toFixed(2)}\n                      </div>\n                      <div>\n                          {'Resource reserved until: ' + this.state.endTime.format('MMMM Do YYYY, h:mm:ss a')}\n                      </div>\n                  </div>\n                  <input\n                      id='slider'\n                      type='range'\n                      min='10' max='90'\n                      value={this.state.duration}\n                      onChange={this.handleDurationChange}\n                      step='.5'/>\n              </div>\n              <div id='time-slider'>\n                  File Size (MB):\n                  <div id='duration-label'>\n                      <div>\n                          {parseFloat(Math.round(this.state.fileSize * 100)/100)}\n                      </div>\n                  </div>\n                  <input\n                      id='slider'\n                      type='range'\n                      min='500' max='2000'\n                      value={this.state.fileSize}\n                      onChange={this.handleFileSizeChange}\n                      step='50'/>\n              </div>\n              <div id='spec-selection'>\n                  <button id='btn-quality' className={quality ? 'selected' : ''}\n                          onClick={() => this.toggleButton('quality')}>\n                      Quality { quality ? '✓' : ''}\n                  </button>\n                  <button id='btn-security' className={security ? 'selected' : ''}\n                          onClick={() => this.toggleButton('security')}>\n                      Security { security ? '✓' : ''}\n                  </button>\n                  <button id='btn-backup' className={backup ? 'selected' : ''}\n                          onClick={() => this.toggleButton('backup')}>\n                      Backup { backup ? '✓' : ''}\n                  </button>\n              </div>\n          </div>\n      )\n  }\n\n  renderJobStatus = () => {\n      const { requestJobID, allocationState, requestName } = this.state;\n      if (allocationState === 'draft' || requestJobID <=0 || !requestName) {\n          return null;\n      }\n      return (<div id='job-status'>\n          <h3>Job: {requestName} (ID:{requestJobID})</h3>\n          <h3>Allocation Status: {allocationState}</h3>\n      </div>)\n  }\n\n  renderButtons = () => {\n      const { requestName, quality, security, allocationState, requestJobID, layer } = this.state;\n      const canSubmit = requestName && (quality || security);\n      const serverInfo = this.getServerInfo(allocationState);\n      if (this.isAllocatedOrQueued(requestJobID, allocationState)) {\n          // Return link and reset button.\n          return(<div id='submit-button'>\n              <button id='redirect-button'\n                      className={allocationState === 'queued' ? 'btn-cancel'\n                          : allocationState === 'completed' ? 'btn-completed' : ''}\n                      onClick={() => this.redirectOrCancel(requestJobID, allocationState)}>\n                  {allocationState === 'queued' ?\n                      `Job id:${requestJobID} queued. Click to Cancel Request`\n                      :\n                      allocationState === 'completed' ?\n                          'Job Completed!' : `View Job On [${allocationState}] - (Layer:${layer} - ${layer === 2 ? serverInfo.l2 : serverInfo.l3})`}\n              </button>\n              {allocationState === 'queued' || allocationState === 'completed' ? null :\n              <button id='reset-button' onClick={this.resetData}>\n                  Request New Resources\n              </button>\n              }\n\n          </div>);\n      }\n      return (\n          <div id='submit-button'>\n              <button className={!canSubmit || allocationState === 'requesting' ? 'btn-disabled' : 'btn-enabled'}\n                      disabled={!canSubmit || allocationState === 'requesting'}\n                      onClick={this.postData}\n              >\n                  {canSubmit && allocationState !== 'requesting' ?\n                      'Submit Request' :\n                      allocationState === 'requesting' ? 'Requesting...' : 'Please fill in all the required fields...'}\n              </button>\n          </div>\n      )\n  }\n\n  // Checks if it's allocated to one of the VM's or if queued\n  // And double checks if it was assigned an id\n  isAllocatedOrQueued = function (jobid, allocation) {\n      return allocation !== 'draft' && jobid > 0;\n  }\n\n  redirectOrCancel = (id, dataCenter) => {\n      // If dataCenter is 'completed' it is not longer on any of the data center.\n      // This redirect should basically reset the app state\n      if (dataCenter === 'completed') {\n          this.resetData();\n\n      }\n\n      // Else if job is still queued, we need to send a cancel.\n      else if (dataCenter === 'queued') {\n          // Send post to urbService to cancel job/\n          this.killRequest(id);\n          // Then reset state of app.\n          this.resetData();\n      } else {\n          // Else it is already allocated.\n          // TODO: Redirect to proper datacenter UI\n          const serverInfo = this.getServerInfo(dataCenter)\n          window.open(`http://${serverInfo.hostname}`);\n      }\n  }\n\n  killRequest = (id) => {\n      fetch(`${this.state.postTarget}/kill`, {\n          method: 'POST',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ id })\n      })\n  }\n\n  getServerInfo = (s) => {\n    switch (s) {\n      case 'east1':\n        return serverConfig.east1;\n      case 'east2':\n        return serverConfig.east2;\n      case 'west1':\n        return serverConfig.west1;\n      case 'west2':\n        return serverConfig.west2;\n      case 'north1':\n        return serverConfig.north1;\n      case 'north2':\n        return serverConfig.north2;\n      case 'urb':\n        return serverConfig.urb;\n      case 'dashboard':\n        return serverConfig.dashboard;\n      default:\n        return serverConfig.localhost;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}